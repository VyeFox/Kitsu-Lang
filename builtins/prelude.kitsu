module {} (
    Tuple,
    Maybe,
    TraitF,
    id,
    choose,
    pipe
)

::Tuple other => Tuple{rest: self, val: other};

::Maybe other => ?val self self.val other;

::Either other => ?val self self.val self.alt other;

::TraitF arg => (self.overloads id error) arg error;

id = x => x;

run = f => f ();

choose = pred => [pred]:: f => [pred, f]:: g => [pred, f, g]:: x => pred x f g x;

pipe = f => [f]:: g => [f, g]:: x => f $ g x;

trait = o => TraitF{
    overloads: atomic (true nothing)
};

